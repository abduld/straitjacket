name: haskell
visible_name: Haskell (GHC + Haskell Platform)
version: "7.6.3"
compiler_profile: straitjacket/compiler/ghc
apparmor_profile: straitjacket/compiled/ghc
filename: source.hs
docker_image: straitjacket-haskell

file_extensions:
  - hs
  - haskell

tests:
  template:
    source: |
      import Control.Monad
      main = do
        contents <- getContents
        let inputLines = lines contents
        mapM_ (putStrLn . processLine) inputLines

      processLine :: String -> String
      -- Process each line of input here
      processLine line = line
    stdin:  "1\n2\n3\n"
    stdout: "\\A1\n2\n3\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  simple:
    source: |
      import Control.Monad
      main = do
        contents <- getContents
        let inputLines = lines contents
        mapM_ (putStrLn . processLine) inputLines

      processLine :: String -> String
      processLine line = show (number * 2)
        where number = read line :: Int
    stdin:  "1\n2\n3\n"
    stdout: "\\A2\n4\n6\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  apparmor:
    source: |
      main = do
          s <- readFile "/etc/hosts"
          putStrLn s
    stdout:
    stderr: "/etc/hosts: openFile: permission denied \\(Permission denied\\)"
    exitstatus: 1

  rlimit:
    source: |
      import Foreign
      main :: IO ()
      main = do
        a0 <- mallocBytes (1073741824 * 4)
        free a0
    stdout: "\\A\\z"
    stderr: "\\Amain: malloc: resource exhausted \\(out of memory\\)\\n\\z"
    exitstatus: 1
