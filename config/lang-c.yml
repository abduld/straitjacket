name: c
visible_name: C (GCC)
version: "C11"
compiler_profile: straitjacket/compiler/c
apparmor_profile: straitjacket/compiled/c
filename: source.c
docker_image: straitjacket-c

file_extensions:
  - c

tests:
  template:
    source: |
      #include <stdio.h>
      #include <stdlib.h>

      #define MAX_LINE_LENGTH 4096

      char *process(char *line) {
        // Process each line of input here
        return line;
      }

      int main() {
        char line[MAX_LINE_LENGTH];

        while(fgets(line, MAX_LINE_LENGTH, stdin)) {
          printf("%s", process(line));
        }

        return 0;
      }
    stdin:  "1\n2\n3\n"
    stdout: "\\A1\n2\n3\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  simple:
    source: |
      #include <stdio.h>
      #include <stdlib.h>

      #define MAX_LINES 256
      #define MAX_LINE_LENGTH 256

      int main() {
        char lines[MAX_LINE_LENGTH][MAX_LINES];
        int lines_read = 0;

        while(fgets(lines[lines_read], MAX_LINE_LENGTH, stdin)) {
          lines_read++;
        }

        for(int i = 0; i < lines_read; i++) {
          printf("%d\n", atoi(lines[i]) * 2);
        }
        return 0;
      }
    stdin:  "1\n2\n3\n"
    stdout: "\\A2\n4\n6\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  apparmor:
    source: |
      #include <stdio.h>
      #include <errno.h>
      int main(int argc, char** argv) {
        if(fopen("/etc/hosts", "r")) {
          printf("opened\n");
          return 0;
        } else {
          printf("not opened: %d\n", errno);
          return 1;
        }
      }
    stdout: "\\Anot opened: 13\\n\\z"
    stderr:
    exitstatus: 1

  rlimit:
    source: |
      #include <stdio.h>
      int main(int argc, char** argv) {
        int TOO_MANY = 1073741824;
        int *lots_of_ints = malloc(TOO_MANY * sizeof(int));
        if (NULL == lots_of_ints) {
          return 1;
        }
        return 0;
      }
    stdout: "\\A\\z"
    stderr: "\\A\\z"
    exitstatus: 1
