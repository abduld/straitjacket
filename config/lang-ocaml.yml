name: ocaml
visible_name: OCaml 4.01
version: "4.01.0"
compiler_profile: straitjacket/compiler/ocaml
apparmor_profile: straitjacket/compiled/default
filename: source.ml
docker_image: straitjacket-ocaml

file_extensions:
  - ml
  - ocaml

tests:
  template:
    source: |
      open Core.Std;;
      let process_line = fun (line) ->
        (* Process each line of input here *)
        line
      ;;

      let lines = In_channel.input_lines In_channel.stdin in
      let processedLines = List.map ~f:process_line lines in
      List.iter ~f:(Printf.printf "%s\n") processedLines
    stdin:  "1\n2\n3\n"
    stdout: "\\A1\n2\n3\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  simple:
    source: |
      open Core.Std;;
      let process_line = fun (line) ->
        let number = int_of_string(line) in
        number * 2
      ;;

      let lines = In_channel.input_lines In_channel.stdin in
      let processedLines = List.map ~f:process_line lines in
      List.iter ~f:(Printf.printf "%d\n") processedLines
    stdin:  "1\n2\n3\n"
    stdout: "\\A2\n4\n6\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  rlimit:
    source: |
      let rec build_list = fun (array, x) ->
        if x = 0 then
          array
        else
          build_list ( "x"::array, x - 1 )
      ;;
      build_list ( [], 1073741824 );;
    stdout: "\\A\\z"
    stderr: "\\AFatal error: out of memory.\\n\\z"
    exitstatus: 2

  apparmor:
    source: |
      let lines = ref [] in
      let chan = open_in "/etc/hosts" in
      try
        while true; do
          lines := input_line chan :: !lines
        done; []
      with End_of_file ->
        close_in chan;
        List.rev !lines
    stdout: "\\A\\z"
    stderr: "/etc/hosts: Permission denied"
    exitstatus: 2
