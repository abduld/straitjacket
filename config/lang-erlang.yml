name: erlang
visible_name: Erlang r18
version: "18"
apparmor_profile: straitjacket/interpreter/erlang
filename: main.erl
docker_image: straitjacket-erlang

file_extensions:
  - erl

tests:
  template:
    source: |
      # escript always ignores the first line, so it's important to have something there that isn't code.

      read_input() ->
        case io:get_line("") of
          eof -> [];
          Line -> [string:strip(Line, right, $\n)] ++ read_input()
        end.

      main(_) ->
        Lines = read_input(),
        lists:foreach(fun(Line) -> io:fwrite("~s~n", [process(Line)]) end, Lines).

      process(Line) ->
        % Process each line of input here
        Line.
    stdin:  "1\n2\n3\n"
    stdout: "\\A1\n2\n3\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  simple:
    source: |
      # escript always ignores the first line, so it's important to have something there that isn't code.

      read_input() ->
        case io:get_line("") of
          eof -> [];
          Line -> [string:strip(Line, right, $\n)] ++ read_input()
        end.

      main(_) ->
        Lines = read_input(),
        lists:foreach(fun(Line) -> io:fwrite("~B~n", [process(Line)]) end, Lines).

      process(Line) ->
        list_to_integer(Line) * 2.
    stdin:  "1\n2\n3\n"
    stdout: "\\A2\n4\n6\n\\z"
    stderr: "\\A\\z"
    exitstatus: 0

  apparmor:
    source: |
      #!/usr/bin/env escript

      main(_) ->
        case file:read_file("/etc/hosts") of
          {ok, _} -> io:format("I read it!");
          {error, eacces} -> io:format("Could not read file")
        end.
    stdout: "Could not read file"
    stderr: "\\A\\z"
    exitstatus: 0

  rlimit:
    source: |
      #!/usr/bin/env escript

      main(_) ->
        lists:seq(1, 1073741824).
    stdout:
    stderr: "Cannot allocate [0-9]+ bytes of memory"
    exitstatus: 139
