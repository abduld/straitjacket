// Automatically generated by MockGen. DO NOT EDIT!
// Source: handlers/context.go

package handlers

import (
	engine "straitjacket/engine"

	gomock "github.com/golang/mock/gomock"
)

// Mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *_MockEngineRecorder
}

// Recorder for MockEngine (not exported)
type _MockEngineRecorder struct {
	mock *MockEngine
}

func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &_MockEngineRecorder{mock}
	return mock
}

func (_m *MockEngine) EXPECT() *_MockEngineRecorder {
	return _m.recorder
}

func (_m *MockEngine) Languages() []*engine.Language {
	ret := _m.ctrl.Call(_m, "Languages")
	ret0, _ := ret[0].([]*engine.Language)
	return ret0
}

func (_mr *_MockEngineRecorder) Languages() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Languages")
}

func (_m *MockEngine) Run(languageName string, opts *engine.RunOptions) (*engine.RunResult, error) {
	ret := _m.ctrl.Call(_m, "Run", languageName, opts)
	ret0, _ := ret[0].(*engine.RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEngineRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", arg0, arg1)
}
